#Beta
import math
import numpy as np
d= np.arange(1,367)
a=(1+(0.01671*np.cos((d-1)*0.0172)))
a1=0.2*0.3
a2=0.3*0.3
a3=0.058
a4=0.54
for i in range(1,366):
    a[i]=(1/a[i])
r=149.60458*a1
s1=((-19.0945*r)+4222.6083)
s2=(1.033*s1)
beta=np.array([7.138087654,
6.904446035,
6.686088304,
6.478578909,
6.286697419,
6.110446232,
5.941420128,
5.792419329,
5.655027079,
5.533310626,
5.423186202,
5.328493708,
5.24515155,
5.176821993,
5.119375493,
5.080181289,
4.935398211,
5.028180336,
5.022222921,
5.029052217,
5.044194147,
5.071070676,
5.105001109,
5.14945427,
5.203863757,
5.263180397,
5.331053289,
5.406860946,
5.485095565,
5.569691839,
5.659985171,
5.749930882,
5.843863098,
5.941078309,
6.034922895,
6.130233563,
6.226292436,
6.322388051,
6.410950667,
6.497650912,
6.581784394,
6.891592831,
6.731675888,
6.79552868,
6.853543831,
6.905065293,
6.940407438,
6.967414977,
6.985486621,
6.994046737,
6.992546506,
6.980465038,
6.946358975,
6.900053939,
6.841117339,
6.769150834,
6.683769006,
6.572025698,
6.458516262,
6.437071094,
6.406471855,
6.240815561,
6.059585902,
5.862653526,
5.649953866,
5.421434864,
5.16145314,
4.900982236,
4.624802012,
4.316405587,
4.008831122,
3.668742542,
3.330496053,
2.959606785,
2.573590082,
2.19119431,
1.776227121,
1.347210348,
0.923816658,
0.468260592,
0,
-0.480460214,
-0.952322792,
-1.455330667,
-1.968882842,
-2.471426078,
-3.004032608,
-3.523969827,
-4.073099125,
-4.607829294,
-5.148862046,
-5.695524199,
-6.269363003,
-6.825280464,
-7.384659313,
-7.946771778,
-8.556503603,
-9.053163972,
-9.618754489,
-10.16085307,
-10.70162751,
-11.28697909,
-11.79957724,
-12.33186368,
-12.83623265,
-13.35885724,
-13.85194859,
-14.36180112,
-14.84056461,
-15.31103156,
-15.77246029,
-16.20063832,
-16.64184081,
-17.04845605,
-17.44330635,
-17.82575041,
-18.1720026,
-18.50481285,
-18.84646621,
-19.12781465,
-19.41695646,
-19.69051922,
-19.9257925,
-20.14496034,
-20.3258042,
-20.51189269,
-20.65946542,
-20.79014388,
-20.88278771,
-20.97933952,
-21.01773973,
-21.05985996,
-21.08504828,
-21.07380254,
-21.04628914,
-20.98374495,
-20.92438093,
-20.81276947,
-20.70475623,
-20.56454867,
-20.41065838,
-20.24341268,
-20.04672353,
-19.83816426,
-19.60241627,
-19.35638648,
-18.19866342,
-18.83542593,
-18.54718871,
-18.23747849,
-17.93505116,
-17.61295083,
-17.2728147,
-16.92877744,
-16.58138818,
-16.23122499,
-15.86742211,
-15.49157484,
-15.12680745,
-14.74135984,
-14.36811013,
-13.98704666,
-13.59967396,
-13.225797,
-12.84728776,
-12.46555543,
-12.09026676,
-11.72190524,
-11.35320147,
-10.99290616,
-10.63422416,
-10.28532052,
-9.939851265,
-9.605409536,
-9.282350723,
-8.964947021,
-8.660017305,
-8.367848578,
-8.083245078,
-7.812307628,
-7.550130671,
-7.302378404,
-7.064390464,
-6.841422776,
-6.633585156,
-6.702232367,
-6.254977123,
-6.084727457,
-5.93019849,
-5.791349231
-5.664115983,
-5.552539467,
-5.452592781,
-5.371965834,
-5.298866823,
-5.240852217,
-5.197659025,
-5.169006822,
-5.150746659,
-5.146354265,
-5.155469782,
-5.173741332,
-5.204626021,
-5.24357197,
-5.294072267,
-5.355631052,
-5.423341403,
-5.500852174,
-5.587607625,
-5.668691444,
-5.781637483,
-5.887440769,
-5.994578662,
-6.107328604,
-6.225039171,
-6.34705788,
-6.466706753,
-6.588923644,
-6.713036298,
-6.83837722,
-6.95732363,
-7.0756708,
-7.192739092,
-7.538402952,
-7.652123487,
-7.668047833,
-7.841194764,
-7.931799489,
-8.00676814,
-8.074344426
-8.133955147,
-8.185032127,
-8.21633116,
-8.237400255,
-8.247762222,
-8.246949197,
-8.234522244,
-8.1977015,
-8.160556876,
-8.620213033,
-8.020988291,
-7.930380179,
-7.81146979,
-7.691905901,
-7.543010122,
-7.393841946,
-7.214448426,
-7.019552578,
-6.809154693,
-6.566845234,
-6.325225437,
-6.068281382,
-5.778808025,
-5.473708459,
-4.883799908,
-4.83585351,
-4.485672676,
-4.120960103,
-3.742057748,
-3.349372105,
-2.943304798,
-2.504412706,
-2.072673851,
-1.62897524,
-1.173823195,
-0.686938485,
-0.21029984,
0.297309254,
0.793037065,
1.297294898,
1.831222635,
2.350730466,
2.876771213,
3.430950518,
3.968132733,
4.509716477,
5.077686981,
5.626021132,
6.176557796,
6.728510996,
7.281127607,
7.83364737,
8.385261927,
8.935199086,
9.482682326,
10.00350398,
10.52023321,
11.05549891,
11.58514677,
12.08493609,
12.57755757,
13.06224108,
13.51491804,
13.98152323,
14.4379882,
14.8604601,
15.29454807,
15.69344081,
16.07960727,
16.42974667,
16.78873643,
17.11081078,
17.41812822,
17.71015974,
17.98644342,
18.22490633,
18.46859847,
18.67412049,
18.84182033,
19.01358717,
19.14752073,
19.26440379,
19.36409402,
19.42686913,
19.47287502,
19.50212064,
19.51461794,
19.49208386,
19.45364101,
19.39947786,
19.31240989,
19.21073935,
19.0947506,
18.94843193,
18.7891798,
18.61735915,
18.41814827,
18.20794152,
17.98722135,
17.74230007,
17.48857397,
17.21312539,
16.93066403,
16.64172503,
16.33451719,
16.02267605,
15.69512229,
15.36479486,
15.0322758,
14.68750593,
14.33205427,
13.97748783,
13.62436781,
13.27325681,
12.91567048,
12.55307407,
12.19535398,
11.84303947,
11.48874403,
11.13378791,
10.78682511,
10.44831417,
10.11182548,
9.785162231,
9.462311405,
9.150536852,
8.84421519,
8.550088882,
8.269757484,
7.994266142,
7.728283342,
7.476331392, 7.23861339, 7.010558933, 6.792748819, 6.5901905])
s4=np.multiply(s2,np.cos(beta))
s6=np.multiply(s2,np.sin(beta))
for i in range(1,366):
    pass
    #s4[i]=s2[i]*np.cos(beta(i))
    #s6[i]=s2[i]*np.sin(beta(i))
s5=np.transpose(s4)
s7=np.transpose(s6)
Re = 6371
z = 700
VFn=math.pow(Re/(Re+z),2)
a=math.sqrt(1-VFn)
be =a*math.cos(Re/(Re+z))
ec=(90-be)
rho = 0.36
Qir=273
alp=0.9
emi=0.88
sigma=5.67e-8
b=2*a*math.sin(a);
c=math.sin(b)
VFw=(math.pi-b-c)/(2*math.pi)
T=np.arange(361)
B1=T+180
B2=T
B3=T
B4=T-90
B5=T
B6=T+90
for i in range(1,362):
    Qs1= np.cos(T)
for i in range(1,361):
        if (i>0 and i<= 90)or (i>=270 and i <362):
            Qs1[i]=0
for i in range(1,362):
    if i >(180-ec) and i<( 180+ec):
        Qs1[i]=0
for i in range(1,361):
    if Qs1[i]<0:
        Qs1[i]=-Qs1[i]
Qa1=Qsun*rho*VFn*np.cos(T)
for i in range(1,362):
    if i>90 and i<270:
        Qa1[i]=0
Qi1=(VFn/5.3)*np.ones(361)
Qs2=np.cos(T)
for i in range(1,361):
    if Qs2[i]<0.0:
        Qs2[i]=0
Qa2=rho*np.zeros((1,361),dtype=int)
Qi2=(VFn/5.3)*np.ones(361)
Qs3=np.cos(T)*VFw
for i in range(1,361):
    if i>=(180-ec) and i<= (180+ec):
        Qs3[i]=0
for i in range(1,361):
    if Qs3[i] <0:
        Qs3[i]=-Qs3[i]
Qa3=rho*VFw*np.ones(361)
for i in range(1,361):
    if i>90 and i<270:
        Qa3[i]=0
    elif Qa3[i]<0:
        Qa3[i]=0
Qi3=VFw*np.ones(361)
Qs4=np.cos(B4)
for i in range(1,361):
    if i>(180-ec)and i<=(180+ec):
        Qs4[i]=0
    elif Qs4[i]<0:
            Qs4[i]=0
Qa4=Qsun*VFw*rho*np.cos(T)
for j in range(1,361):
    if j>=90 and j<=270:
        Qa4[j]=0
Qi4=VFw*np.ones(361)
Qs5=np.cos(T)*VFw
for i in range(1,361):
    if i>=(180-ec) and i<= (180+ec):
        Qs5[i]=0
for i in range(1,361):
    if Qs5[i] <0:
        Qs5[i]=-Qs5[i]
Qa5=rho*VFw*np.ones(361)
for j in range(1,361):
    if j>=90 and j<=270:
        Qa5[j]=0
Qi5=VFw*np.ones(361)
Qs6=np.cos(B6)
for i in range(1,361):
    if i>(180-ec) and i<(180+ec):
        Qs6[i]=0.0
    elif Qs6[i]<0:
        Qs6[i]=0
Qa6=rho*VFw*np.cos(T)
for i in range(1,361):
    if i>90 and i<270:
        Qa6[i]=0
    elif Qa6[i]<0:
        Qa6[i]=0
Qs7= np.cos(T)
for i in range(1,361):
    if i>=(180-ec) and i<= (180+ec):
        Qs7[i]=0
for i in range(1,361):
    if Qs7[i]<0:
        Qs7[i]=-Qs7[i]
Qa7=Qsun*rho*VFw*np.cos(T)
for i in range(1,361):
    if i>=90 and i<=270:
        Qa7[i]=0
Qi7=(VFn/5.3)*np.ones(361)
Qs8=np.sin(T+45)
for i in range(361):
    if i>=(180-ec) and i<= 315:
        Qs8[i]=0
for i in range(1,361):
    if Qs8[i]<0:
        Qs8[i]=-Qs8[i]
Qs9=VFw*np.sin(T-45)
for i in range(361):
    if i>=(180-ec) and i<=(180+ec):
        Qs9[i]=0
for i in range(1,361):
    if Qs9[i]<0:
        Qs9[i]=-Qs9[i]
Qi6=VFw*np.ones(361)
p1=(Qs1+Qa1+Qi1)
p2=(Qs2+Qa2+Qi2)
p3=(Qs3+Qa3+Qi3)
p4=(Qs4+Qa4+Qi4)
p5=(Qs5+Qa5+Qi5)
p6=(Qs6+Qa6+Qi6)
p7=(Qs7+Qa7+Qi7)
p8=(Qs7+Qa7+Qi7)     
p9=Qs8
p10=Qs9
p11= Qs8+Qs9/3
p12=Qs9+Qs8/3      

# WHC
import math
import numpy as np
Re = 6371
z = 700
VFn=math.pow(Re/(Re+z),2)
a=math.sqrt(1-VFn)
be =a*math.cos(Re/(Re+z))
ec=(90-be)
rho = 0.36
Qsun=1412
Qir=273
alp=0.9
emi=0.88
sigma=5.67e-8
b=2*a*math.sin(a);
c=math.sin(b)
VFw=(math.pi-b-c)/(2*math.pi)
T=np.arange(361)
B1=T+180
B2=T
B3=T
B4=T-90
B5=T
B6=T+90
a1=0.2*0.3
a2=0.3*0.3
a3=0.058
a4=0.54
Beta=24
for i in range(1,362):
    Qs1= Qsun*np.cos(T)
for i in range(1,361):
        if (i>0 and i<= 90)or (i>=270 and i <362):
            Qs1[i]=0
for i in range(1,362):
    if i >(180-ec) and i<( 180+ec):
        Qs1[i]=0
for i in range(1,361):
    if Qs1[i]<0:
        Qs1[i]=-Qs1[i]*math.cos(Beta)
Qa1=Qsun*rho*VFn*np.cos(T)
for i in range(1,362):
    if i>90 and i<270:
        Qa1[i]=0
Qi1=Qir*VFn*np.ones(361)
Qs2=Qsun*np.cos(T)*np.cos(Beta)
for i in range(1,361):
    if Qs2[i]<0.0:
        Qs2[i]=0
Qa2=np.zeros((1,361),dtype=int)
Qi2=Qir*VFn*np.ones(361)
Qs3=Qsun*np.cos(T)*np.sin(Beta)
for i in range(1,361):
    if i>=(180-ec) and i<= (180+ec):
        Qs3[i]=0
for i in range(1,361):
    if Qs3[i] <0:
        Qs3[i]=-Qs3[i]
Qa3=Qsun*rho*VFw*np.ones(361)
for i in range(1,361):
    if i>90 and i<270:
        Qa3[i]=0
    elif Qa3[i]<0:
        Qa3[i]=0
Qi3=Qir*VFw*np.ones(361)
Qs4=Qsun*np.cos(B4)*np.cos(Beta)
for i in range(1,361):
    if i>(180-ec)and i<=(180+ec):
        Qs4[i]=0
    elif Qs4[i]<0:
            Qs4[i]=0
Qa4=Qsun*VFw*rho*np.cos(T)
for j in range(1,361):
    if j>=90 and j<=270:
        Qa4[j]=0
Qi4=Qir*VFw*np.ones(361)
Qs5=Qsun*np.cos(T)*VFw*np.sin(Beta)
for i in range(1,361):
    if i>=(180-ec) and i<= (180+ec):
        Qs5[i]=0
for i in range(1,361):
    if Qs5[i] <0:
        Qs5[i]=-Qs5[i]
Qa5=Qsun*rho*VFw*np.ones(361)
for j in range(1,361):
    if j>=90 and j<=270:
        Qa5[j]=0
Qi5=Qir*VFw*np.ones(361)
Qs6=Qsun*np.cos(B6)*np.cos(Beta)
for i in range(1,361):
    if i>(180-ec) and i<(180+ec):
        Qs6[i]=0.0
    elif Qs6[i]<0:
        Qs6[i]=0
Qa6=Qsun*rho*VFw*np.cos(T)
for i in range(1,361):
    if i>90 and i<270:
        Qa6[i]=0
    elif Qa6[i]<0:
        Qa6[i]=0
Qs7= Qsun*np.cos(T)*np.cos(Beta)
for i in range(1,361):
    if i>=(180-ec) and i<= (180+ec):
        Qs7[i]=0
for i in range(1,361):
    if Qs7[i]<0:
        Qs7[i]=-Qs7[i]
Qa7=Qsun*rho*VFw*np.cos(T)
for i in range(1,361):
    if i>=90 and i<=270:
        Qa7[i]=0
Qi7=Qir*VFn*np.ones(361)
Qs8=Qsun*np.sin(T+45)
for i in range(361):
    if i>=(180-ec) and i<= 315:
        Qs8[i]=0
for i in range(1,361):
    if Qs8[i]<0:
        Qs8[i]=-Qs8[i]
Qs9=Qsun*VFw*np.sin(T-45)
for i in range(361):
    if i>=(180-ec) and i<=(180+ec):
        Qs9[i]=0
for i in range(1,361):
    if Qs9[i]<0:
        Qs9[i]=-Qs9[i]
Qi6=Qir*VFw*np.ones(361)
p1=(Qs1+Qa1+Qi1)
p2=(Qs2+Qa2+Qi2)
p3=(Qs3+Qa3+Qi3)
p4=(Qs4+Qa4+Qi4)
p5=(Qs5+Qa5+Qi5)
p6=(Qs6+Qa6+Qi6)
p7=(Qs7+Qa7+Qi7)
p8=(Qs7+Qa7+Qi7)
p9=Qs8
p10=Qs9
p11= Qs8+Qs9/3
p12=Qs9+Qs8/3

#WCC
import numpy as np
Re = 6371
z = 700
VFn=math.pow(Re/(Re+z),2)
a=math.sqrt(1-VFn)
be =a*math.cos(Re/(Re+z))
ec=(90-be)
rho = 0.36
Qsun=1412
Qir=273
alp=0.9
emi=0.88
sigma=5.67e-8
b=2*a*math.sin(a);
c=math.sin(b)
VFw=(math.pi-b-c)/(2*math.pi)
T=np.arange(361)
B1=T+180
B2=T
B3=T
B4=T-90
B5=T
B6=T+90
a1=0.2*0.3
a2=0.3*0.3
a3=0.058
a4=0.54
Beta=24
for i in range(1,362):
    Qs1= Qsun*np.cos(T)
for i in range(1,361):
        if (i>0 and i<= 90)or (i>=270 and i <362):
            Qs1[i]=0
for i in range(1,362):
    if i >(180-ec) and i<( 180+ec):
        Qs1[i]=0
for i in range(1,361):
    if Qs1[i]<0:
        Qs1[i]=-Qs1[i]*math.cos(Beta)
Qa1=Qsun*rho*VFn*np.cos(T)
for i in range(1,362):
    if i>90 and i<270:
        Qa1[i]=0
Qi1=Qir*VFn*np.ones(361)
Qs2=Qsun*np.cos(T)*np.cos(Beta)
for i in range(1,361):
    if Qs2[i]<0.0:
        Qs2[i]=0
Qa2=np.zeros((1,361),dtype=int)
Qi2=Qir*VFn*np.ones(361)
Qs3=Qsun*np.cos(T)*np.sin(Beta)
for i in range(1,361):
    if i>=(180-ec) and i<= (180+ec):
        Qs3[i]=0
for i in range(1,361):
    if Qs3[i] <0:
        Qs3[i]=-Qs3[i]
Qa3=Qsun*rho*VFw*np.ones(361)
for i in range(1,361):
    if i>90 and i<270:
        Qa3[i]=0
    elif Qa3[i]<0:
        Qa3[i]=0
Qi3=Qir*VFw*np.ones(361)
Qs4=Qsun*np.cos(B4)*np.cos(Beta)
for i in range(1,361):
    if i>(180-ec)and i<=(180+ec):
        Qs4[i]=0
    elif Qs4[i]<0:
            Qs4[i]=0
Qa4=Qsun*VFw*rho*np.cos(T)
for j in range(1,361):
    if j>=90 and j<=270:
        Qa4[j]=0
Qi4=Qir*VFw*np.ones(361)
Qs5=Qsun*np.cos(T)*VFw*np.sin(Beta)
for i in range(1,361):
    if i>=(180-ec) and i<= (180+ec):
        Qs5[i]=0
for i in range(1,361):
    if Qs5[i] <0:
        Qs5[i]=-Qs5[i]
Qa5=Qsun*rho*VFw*np.ones(361)
for j in range(1,361):
    if j>=90 and j<=270:
        Qa5[j]=0
Qi5=Qir*VFw*np.ones(361)
Qs6=Qsun*np.cos(B6)*np.cos(Beta)
for i in range(1,361):
    if i>(180-ec) and i<(180+ec):
        Qs6[i]=0.0
    elif Qs6[i]<0:
        Qs6[i]=0
Qa6=Qsun*rho*VFw*np.cos(T)
for i in range(1,361):
    if i>90 and i<270:
        Qa6[i]=0
    elif Qa6[i]<0:
        Qa6[i]=0
Qs7= Qsun*np.cos(T)*np.cos(Beta)
for i in range(1,361):
    if i>=(180-ec) and i<= (180+ec):
        Qs7[i]=0
for i in range(1,361):
    if Qs7[i]<0:
        Qs7[i]=-Qs7[i]
Qa7=Qsun*rho*VFw*np.cos(T)
for i in range(1,361):
    if i>=90 and i<=270:
        Qa7[i]=0
Qi7=Qir*VFn*np.ones(361)
Qs8=Qsun*np.sin(T+45)
for i in range(361):
    if i>=(180-ec) and i<= 315:
        Qs8[i]=0
for i in range(1,361):
    if Qs8[i]<0:
        Qs8[i]=-Qs8[i]
Qs9=Qsun*VFw*np.sin(T-45)
for i in range(361):
    if i>=(180-ec) and i<=(180+ec):
        Qs9[i]=0
for i in range(1,361):
    if Qs9[i]<0:
        Qs9[i]=-Qs9[i]
Qi6=Qir*VFw*np.ones(361)
p1=(Qs1+Qa1+Qi1)
p2=(Qs2+Qa2+Qi2)
p3=(Qs3+Qa3+Qi3)
p4=(Qs4+Qa4+Qi4)
p5=(Qs5+Qa5+Qi5)
p6=(Qs6+Qa6+Qi6)
p7=(Qs7+Qa7+Qi7)
p8=(Qs7+Qa7+Qi7)
p9=Qs8
p10=Qs9
p11= Qs8+Qs9/3
p12=Qs9+Qs8/3
